/*
/static/script.js
v13.0 - Final Delivery
完整的前端逻辑，包含：
1. 提供商和模型的CRUD操作
2. 对话管理和流式响应处理
3. 结构化评分详情的可视化展示
*/

document.addEventListener('DOMContentLoaded', () => {
    // 元素获取
    const addProviderForm = document.getElementById('add-provider-form');
    const providerListDiv = document.getElementById('provider-list');
    const modelListContainer = document.getElementById('model-list-container');
    const questionInput = document.getElementById('question-input');
    const submitBtn = document.getElementById('submit-btn');
    const submitIcon = document.getElementById('submit-icon');
    const loadingSpinner = document.getElementById('loading-spinner');
    const chatLog = document.getElementById('chat-log');
    const newChatBtn = document.getElementById('new-chat-btn');
    const detailsModal = document.getElementById('details-modal');
    const closeModalBtn = document.getElementById('close-modal-btn');
    const processDetailsContainer = document.getElementById('process-details-container');

    const API_BASE_URL = window.location.origin;
    let conversationHistory = [];

    // === 核心交互逻辑 ===
    async function handleSubmission() {
        const question = questionInput.value.trim();
        const selectedCheckboxes = document.querySelectorAll('.model-checkbox:checked');
        const selectedModels = Array.from(selectedCheckboxes).map(cb => cb.value);

        if (!question || submitBtn.disabled) return;
        if (selectedModels.length === 0) {
            alert('请至少选择一个参战模型！');
            return;
        }

        createTurnContainer(question, selectedModels);
        conversationHistory.push({ role: 'user', content: question });

        questionInput.value = '';
        questionInput.style.height = 'auto';

        await regenerateFromLastTurn();
    }

    async function regenerateFromLastTurn() {
        const lastTurn = chatLog.querySelector('.turn-container:last-child');
        if (!lastTurn) return;
        await startGeneration(lastTurn);
    }

    async function startGeneration(turnContainer) {
        toggleLoading(true);

        const question = turnContainer.dataset.question;
        const selectedModels = JSON.parse(turnContainer.dataset.models);

        let assistantContainer = turnContainer.querySelector('.assistant-response-container');
        if (assistantContainer) assistantContainer.remove();

        assistantContainer = document.createElement('div');
        assistantContainer.className = 'assistant-response-container';
        const thinkingBubbleWrapper = createThinkingBubbleElement();
        assistantContainer.appendChild(thinkingBubbleWrapper);
        turnContainer.appendChild(assistantContainer);
        chatLog.scrollTop = chatLog.scrollHeight;

        let finalAnswerText = "";

        try {
            const userQuestionOfTurn = turnContainer.dataset.question;
            const lastUserIndex = findLastIndex(conversationHistory, msg => msg.role === 'user' && msg.content === userQuestionOfTurn);
            let historyForRequest = [...conversationHistory];
            if (lastUserIndex !== -1 && lastUserIndex + 1 < historyForRequest.length && historyForRequest[lastUserIndex + 1].role === 'assistant') {
                historyForRequest.splice(lastUserIndex + 1, 1);
            }

            const response = await fetch(`${API_BASE_URL}/api/process`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ question, selected_models: selectedModels, history: historyForRequest }),
            });

            if (!response.body) throw new Error('浏览器不支持ReadableStream。');

            const reader = response.body.getReader();
            const decoder = new TextDecoder("utf-8");
            let buffer = '';

            while (true) {
                const { value, done } = await reader.read();
                if (done) break;

                buffer += decoder.decode(value, { stream: true });
                const parts = buffer.split('\n\n');
                buffer = parts.pop() || '';

                for (const part of parts) {
                    if (part.startsWith('data: ')) {
                        const dataString = part.substring(6);
                        try {
                            const event = JSON.parse(dataString);
                            if (event.type === 'final_result') {
                                finalAnswerText = event.data.best_answer;
                            }
                            updateThinkingBubble(thinkingBubbleWrapper, event);
                            chatLog.scrollTop = chatLog.scrollHeight;
                        } catch (e) {
                            console.error('解析JSON事件失败:', dataString, e);
                        }
                    }
                }
            }
        } catch (error) {
            updateThinkingBubble(thinkingBubbleWrapper, { type: 'error', data: `客户端请求错误: ${error.message}` });
        } finally {
            const userQuestionOfTurn = turnContainer.dataset.question;
            const lastUserIndex = findLastIndex(conversationHistory, msg => msg.role === 'user' && msg.content === userQuestionOfTurn);
            if (lastUserIndex !== -1) {
                if (lastUserIndex + 1 < conversationHistory.length && conversationHistory[lastUserIndex + 1].role === 'assistant') {
                    if (finalAnswerText) conversationHistory[lastUserIndex + 1].content = finalAnswerText;
                    else conversationHistory.splice(lastUserIndex + 1, 1);
                } else if (finalAnswerText) {
                    conversationHistory.splice(lastUserIndex + 1, 0, { role: 'assistant', content: finalAnswerText });
                }
            }
            toggleLoading(false);
        }
    }

    // === UI元素创建与更新 ===
    function createTurnContainer(question, selectedModels) {
        const container = document.createElement('div');
        container.className = 'turn-container mt-8';
        container.dataset.question = question;
        container.dataset.models = JSON.stringify(selectedModels);
        
        const bubble = document.createElement('div');
        bubble.className = 'chat-bubble user-bubble';
        bubble.innerHTML = markdownToHtml(question);
        
        container.appendChild(bubble);
        chatLog.appendChild(container);
    }

    function createThinkingBubbleElement() {
        const wrapper = document.createElement('div');
        wrapper.className = 'assistant-thinking-wrapper';
        
        const bubble = document.createElement('div');
        bubble.className = 'chat-bubble assistant-bubble';
        bubble.innerHTML = '<span class="italic text-gray-400">正在连接服务器...</span>';
        
        wrapper.appendChild(bubble);
        return wrapper;
    }

    function updateThinkingBubble(wrapper, event) {
        let bubble = wrapper.querySelector('.chat-bubble');
        
        if (event.type === 'status') {
            bubble.innerHTML = `<span class="italic text-gray-400">${event.data}</span>`;
        } else if (event.type === 'error') {
            bubble.innerHTML = `<span class="text-red-400 font-semibold">${event.data}</span>`;
            addActions(wrapper, event);
        } else if (event.type === 'final_result') {
            bubble.innerHTML = markdownToHtml(event.data.best_answer);
            addActions(wrapper, event);
        }
    }

    function addActions(container, event) {
        let existingActions = container.querySelector('.action-buttons');
        if (existingActions) existingActions.remove();

        const actionsWrapper = document.createElement('div');
        actionsWrapper.className = 'action-buttons';

        if (event.data && event.data.process_details && event.data.process_details.length > 0) {
            const detailsButton = document.createElement('button');
            detailsButton.textContent = '查看详情';
            detailsButton.className = 'action-btn';
            detailsButton.onclick = () => {
                renderProcessDetails(event.data.process_details);
                detailsModal.classList.add('active');
            };
            actionsWrapper.appendChild(detailsButton);
        }

        const regenButton = document.createElement('button');
        regenButton.textContent = '重新生成';
        regenButton.className = 'action-btn';
        regenButton.onclick = () => {
            const turnContainer = container.closest('.turn-container');
            startGeneration(turnContainer);
        };
        actionsWrapper.appendChild(regenButton);

        container.appendChild(actionsWrapper);
    }

    // === 数据加载与渲染 ===
    async function loadAndRenderAll() {
        try {
            const response = await fetch(`${API_BASE_URL}/api/providers`);
            if (!response.ok) throw new Error('无法从服务器获取服务商列表');
            const providers = await response.json();
            renderProviderList(providers);
            renderModelSelection(providers);
        } catch (error) {
            console.error('加载失败:', error);
            const errorMsg = `<p class="text-red-500 p-2">${error.message}</p>`;
            providerListDiv.innerHTML = errorMsg;
            modelListContainer.innerHTML = errorMsg;
        }
    }

    function renderProviderList(providers) {
        providerListDiv.innerHTML = "";
        if (providers.length === 0) {
            providerListDiv.innerHTML = '<p class="text-xs text-gray-500 p-2">尚未添加任何模型服务商。</p>';
            return;
        }

        providers.forEach(p => {
            const wrapper = document.createElement('div');
            wrapper.className = 'provider-item bg-gray-700/50 rounded-lg';
            wrapper.dataset.providerName = p.name;

            const header = document.createElement('div');
            header.className = 'flex justify-between items-center p-2 cursor-pointer header-toggle';
            header.innerHTML = `
                <div>
                    <span class="font-semibold text-sm text-cyan-400">${p.name}</span>
                    <span class="text-xs text-gray-400 ml-2">(${p.type})</span>
                </div>
                <span class="text-gray-500 text-xs header-arrow transition-transform">编辑 ▼</span>
            `;
            wrapper.appendChild(header);

            const form = document.createElement('form');
            form.className = 'edit-provider-form hidden p-3 border-t border-gray-600 space-y-2';
            form.dataset.originalName = p.name;
            form.innerHTML = `
                <input name="name" value="${p.name}" class="form-input text-sm bg-gray-600 cursor-not-allowed" readonly title="名称不可修改">
                <select name="type" class="form-input text-sm">
                    <option value="OpenAI" ${p.type === 'OpenAI' ? 'selected' : ''}>OpenAI 兼容型</option>
                    <option value="Gemini" ${p.type === 'Gemini' ? 'selected' : ''}>Google Gemini</option>
                </select>
                <input name="api_key" type="password" value="" class="form-input text-sm" placeholder="保持不变或输入新密钥 (例如: ${p.api_key})">
                <input name="api_base" value="${p.api_base || ''}" class="form-input text-sm" placeholder="API Base URL (OpenAI型必填)">
                <input name="models" required value="${p.original_models}" class="form-input text-sm" placeholder="模型列表 (逗号分隔)">
                <div class="flex space-x-2 pt-1">
                    <button type="submit" class="font-bold py-1 px-3 text-sm rounded-md bg-blue-600 hover:bg-blue-700 flex-1 transition-colors">保存</button>
                    <button type="button" class="delete-provider-btn font-bold py-1 px-3 text-sm rounded-md bg-red-700 hover:bg-red-600">删除</button>
                </div>
            `;
            wrapper.appendChild(form);
            providerListDiv.appendChild(wrapper);
        });
    }

    function renderModelSelection(providers) {
        modelListContainer.innerHTML = "";
        if (providers.length === 0) {
            modelListContainer.innerHTML = '<p class="text-xs text-gray-500 p-2">无可用模型。</p>';
            return;
        }

        providers.forEach(provider => {
            const models = provider.original_models.split(',').map(m => m.trim()).filter(Boolean);
            if (models.length === 0) return;

            models.forEach(modelName => {
                const modelIdentifier = `${provider.name}::${modelName}`;
                const label = document.createElement('label');
                label.className = 'flex items-center space-x-2 p-1.5 rounded-md cursor-pointer hover:bg-gray-700 transition-colors';
                label.innerHTML = `
                    <input type="checkbox" value="${modelIdentifier}" class="model-checkbox form-checkbox h-4 w-4 bg-gray-600 border-gray-500 text-purple-500 focus:ring-purple-500">
                    <span class="text-xs text-gray-300">${provider.name} - ${modelName}</span>
                `;
                modelListContainer.appendChild(label);
            });
        });
    }

    function renderProcessDetails(details) {
        processDetailsContainer.innerHTML = "";
        if (!details || details.length === 0) {
            processDetailsContainer.innerHTML = '<p class="text-gray-500">没有详细过程信息。</p>';
            return;
        }

        details.forEach(detail => {
            processDetailsContainer.appendChild(createDetailElement(detail));
        });
    }

    function createDetailElement(detail) {
        const wrapper = document.createElement('div');
        wrapper.className = 'bg-gray-800/50 p-4 rounded-lg border border-gray-700 collapse-wrapper';

        const scoreClass = detail.total_score >= 10 ? 'text-green-400' : 
                          detail.total_score >= 7 ? 'text-yellow-400' : 'text-red-400';

        let critiquesHtml = '<p class="text-xs text-gray-500">没有收到有效的评审意见。</p>';
        if (detail.critiques_received && detail.critiques_received.length > 0) {
            critiquesHtml = detail.critiques_received.map(c => {
                const dimensionScores = `
                    <div class="flex flex-wrap gap-2 mt-2">
                        <span class="dimension-score score-${c.accuracy || 0}">准确性: ${c.accuracy || 0}/3</span>
                        <span class="dimension-score score-${c.completeness || 0}">完整性: ${c.completeness || 0}/3</span>
                        <span class="dimension-score score-${c.clarity || 0}">清晰性: ${c.clarity || 0}/3</span>
                        <span class="dimension-score score-${c.usefulness || 0}">实用性: ${c.usefulness || 0}/3</span>
                    </div>
                `;
                return `
                    <div class="mt-2 p-3 bg-gray-700/50 rounded-md">
                        <p class="text-sm">
                            <strong>评审员:</strong> ${markdownToHtml(c.critic_name)} | 
                            <strong class="ml-2">总分:</strong> ${c.score}/12
                        </p>
                        ${dimensionScores}
                        <p class="text-xs mt-2"><strong>评语:</strong> ${markdownToHtml(c.comment || 'N/A')}</p>
                    </div>
                `;
            }).join('');
        }

        wrapper.innerHTML = `
            <div class="flex justify-between items-center cursor-pointer collapsible-header">
                <h3 class="text-lg font-bold text-cyan-400">${markdownToHtml(detail.model_name)}</h3>
                <span class="text-md font-semibold ${scoreClass}">总分: ${detail.total_score.toFixed(1)}/12</span>
            </div>
            <div class="collapsible-content mt-3 border-t border-gray-600 pt-3 text-gray-300 text-sm">
                <div class="mb-4">
                    <h4 class="font-semibold mb-1 text-gray-400">1. 初始答案</h4>
                    <div class="p-3 bg-gray-900/40 rounded prose prose-invert max-w-none text-sm">
                        ${markdownToHtml(detail.initial_answer)}
                    </div>
                </div>
                <div class="mb-4">
                    <h4 class="font-semibold mb-1 text-gray-400">2. 收到的评审</h4>
                    ${critiquesHtml}
                </div>
                <div>
                    <h4 class="font-semibold mb-1 text-gray-400">3. 修正后答案</h4>
                    <div class="p-3 bg-gray-900/40 rounded prose prose-invert max-w-none text-sm">
                        ${markdownToHtml(detail.revised_answer)}
                    </div>
                </div>
            </div>
        `;

        wrapper.querySelector('.collapsible-header').addEventListener('click', (e) => {
            e.currentTarget.parentElement.classList.toggle('open');
        });

        return wrapper;
    }

    // === 辅助函数 ===
    function markdownToHtml(text) {
        if (!text) return '';
        return String(text)
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
            .replace(/\*(.*?)\*/g, "<em>$1</em>")
            .replace(/```([\s\S]*?)```/g, '<pre class="bg-gray-900 p-2 rounded-md my-2 text-sm overflow-x-auto"><code>$1</code></pre>')
            .replace(/`(.*?)`/g, '<code class="bg-gray-900 px-1 rounded-sm">$1</code>')
            .replace(/\n/g, "<br>");
    }

    function toggleLoading(isLoading) {
        submitBtn.disabled = isLoading;
        loadingSpinner.classList.toggle('hidden', !isLoading);
        submitIcon.classList.toggle('hidden', isLoading);
    }

    function findLastIndex(arr, callback) {
        for (let i = arr.length - 1; i >= 0; i--) {
            if (callback(arr[i], i, arr)) return i;
        }
        return -1;
    }

    // === 全局事件监听器 ===
    document.addEventListener('click', async (e) => {
        const toggleHeader = e.target.closest('.header-toggle');
        if (toggleHeader) {
            toggleHeader.parentElement.classList.toggle('open');
        }

        if (e.target.classList.contains('delete-provider-btn')) {
            const form = e.target.closest('.edit-provider-form');
            if (!form) return;
            const providerName = form.dataset.originalName;
            if (!confirm(`确定要删除服务商 '${providerName}' 吗？`)) return;

            try {
                const response = await fetch(`${API_BASE_URL}/api/providers/${providerName}`, {
                    method: 'DELETE'
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || '删除失败');
                }
                await loadAndRenderAll();
            } catch (error) {
                alert(`错误: ${error.message}`);
            }
        }
    });

    document.addEventListener('submit', async (e) => {
        e.preventDefault();
        const form = e.target;
        const submitButton = form.querySelector('button[type="submit"]');
        const originalText = submitButton.textContent;
        submitButton.textContent = '处理中...';
        submitButton.disabled = true;

        try {
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            if ('api_key' in data && data.api_key === '') {
                delete data.api_key;
            }

            let response;
            if (form.id === 'add-provider-form') {
                response = await fetch(`${API_BASE_URL}/api/providers`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
            } else if (form.classList.contains('edit-provider-form')) {
                const originalName = form.dataset.originalName;
                response = await fetch(`${API_BASE_URL}/api/providers/${originalName}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
            }

            if (response && !response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.detail || '操作失败');
            }

            if (form.id === 'add-provider-form') {
                form.reset();
            }

            await loadAndRenderAll();
        } catch (error) {
            alert(`错误: ${error.message}`);
        } finally {
            submitButton.textContent = originalText;
            submitButton.disabled = false;
        }
    });

    submitBtn.addEventListener('click', handleSubmission);

    questionInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSubmission();
        }
    });

    questionInput.addEventListener('input', () => {
        questionInput.style.height = 'auto';
        questionInput.style.height = questionInput.scrollHeight + 'px';
    });

    closeModalBtn.addEventListener('click', () => {
        detailsModal.classList.remove('active');
    });

    detailsModal.addEventListener('click', (e) => {
        if (e.target === detailsModal) {
            detailsModal.classList.remove('active');
        }
    });

    newChatBtn.addEventListener('click', () => {
        if (conversationHistory.length > 0 && !confirm('确定要开始新的对话吗？聊天记录将被清空。')) {
            return;
        }
        conversationHistory = [];
        chatLog.innerHTML = "";
        const initialTurn = document.createElement('div');
        initialTurn.className = 'turn-container';
        initialTurn.innerHTML = '<div class="assistant-response-container"><div class="chat-bubble assistant-bubble">您好，新对话已开始。</div></div>';
        chatLog.appendChild(initialTurn);
    });

    // === 初始化 ===
    loadAndRenderAll();
    const initialTurn = document.createElement('div');
    initialTurn.className = 'turn-container';
    initialTurn.innerHTML = '<div class="assistant-response-container"><div class="chat-bubble assistant-bubble">您好，欢迎使用AI模型聚合工厂 v13.0。</div></div>';
    chatLog.appendChild(initialTurn);
});
